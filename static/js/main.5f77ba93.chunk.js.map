{"version":3,"sources":["app/modules/tictac/state.ts","p2p/usePeerState.ts","p2p/core.ts","utils/useEventListener.ts","app/modules/users.ts","app/modules/chat.ts","app/modules/connection.ts","app/team/index.tsx","app/PeerProvider.tsx","app/CombineProviders.tsx","utils/useAsyncSetState.ts","app/modules/tictac/helpers.ts","utils/immutableHelpers.ts","app/modules/tictac/index.ts","app/pages/tictac/Field.tsx","app/pages/tictac/Game.tsx","app/pages/tictac/index.tsx","app/App.tsx","serviceWorker.ts","app/router/index.tsx","index.tsx"],"names":["GameStateEnum","Field","context","createContext","usePeer","useContext","toInternalPeer","connection","id","peer","send","action","selfEmit","events","selfPeer","selfRefAsHost","emit","selfRefAsPeer","usePeerConnection","hostId","useState","EventEmitter","ready","host","connections","isHost","error","peerState","setState","setPeer","setHost","peerDispatch","useCallback","console","log","type","peerBroadcast","source","forEach","useEffect","then","peerConstructor","default","secure","createHost","prev","on","conn","filter","x","Error","connect","serialization","connectToHost","destroy","useDataListen","actionCreator","handler","deps","eventName","savedHandler","useRef","current","listener","removeListener","useEventListener","isActionOf","actions","login","createAction","loginResponse","newUser","createStoreContext","currentUser","users","addUser","user","initState","state","Provider","useUsers","store","dispatch","broadcast","username","userId","payload","newState","sendMessage","receiveMessage","messages","addMessage","message","useChat","chatStore","userStore","usersContext","newMessage","author","find","text","connecting","setConnected","useConnection","connectionStore","Team","React","textState","chatState","usersState","userLogin","name","msg","TextField","value","onChange","event","currentTarget","Button","onClick","map","i","key","PeerProvider","route","children","match","useRouteMatch","history","useHistory","params","undefined","push","CombineProviders","providers","First","Rest","useAsyncSetState","initialState","resolvers","resolve","stateUpdate","Promise","reject","stateBefore","stateAfter","Function","e","useAsyncSetStateFunction","winConditions","checkWin","field","reduce","winner","x1","y1","x2","y2","x3","y3","Empty","updateAt","array","index","newValue","emptyField","useTictacState","NotStarted","players","currentMove","gameState","setGameState","playersSignedUp","signUpPlayer","startGame","Running","makeMove","cords","a","currentPlayerIndex","findIndex","currentPlayer","y","X","O","newField","tie","some","row","cell","Ended","nextPlayerIndex","restartGame","signUpRequest","signUpResponse","successSignUpResponse","moveRequest","moveResponse","useStyles","makeStyles","display","flexDirection","border","height","width","boxSizing","Cell","classes","className","TictacField","onMove","handleClick","Game","Tictac","signUp","newPlayer","move","restart","useTictac","Grid","container","item","xs","join","App","path","ChatProvider","UsersProvider","ConnectionProvider","Boolean","window","location","hostname","RouterOutlet","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","catch"],"mappings":"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","file":"static/js/main.5f77ba93.chunk.js","sourcesContent":["import { useAsyncSetState } from \"utils/useAsyncSetState\"\nimport { UserInfo } from \"../users\"\nimport { useCallback, useMemo } from \"react\"\nimport { checkWin, checkTie } from \"./helpers\"\nimport { updateAt } from 'utils/immutableHelpers'\n\nexport enum GameStateEnum {\n    NotStarted,\n    Running,\n    Ended\n}\n\nexport enum Field {\n    Empty,\n    X,\n    O\n}\n\nexport type GameState = {\n    state: GameStateEnum\n    field: Field[][]\n    players: [UserInfo | null, UserInfo | null]\n    currentMove: UserInfo | null,\n    winner: UserInfo | null,\n}\n\nexport type Cords = {\n    x: number\n    y: number\n}\n\nexport const emptyField: Field[][] = [\n    [Field.Empty, Field.Empty, Field.Empty],\n    [Field.Empty, Field.Empty, Field.Empty],\n    [Field.Empty, Field.Empty, Field.Empty],\n]\n\nconst useTictacState = () => {\n    const [gameState, setGameState] = useAsyncSetState<GameState>({\n        state: GameStateEnum.NotStarted,\n        field: [...[...emptyField]],\n        players: [null, null],\n        currentMove: null,\n        winner: null\n    })\n\n    const playersSignedUp = useCallback((state: GameState) =>\n        state.players[0] !== null && state.players[1] !== null,\n        [])\n\n    const signUpPlayer = useCallback((user: UserInfo) => {\n        if (gameState.state !== GameStateEnum.NotStarted)\n            return null\n\n        if (gameState.players[0] === null)\n            return setGameState(prev => ({ ...prev, players: [user, prev.players[1]] }))\n\n        if (gameState.players[0] !== null && gameState.players[1] === null)\n            return setGameState(prev => ({ ...prev, players: [prev.players[0], user] }))\n\n        return null\n    }, [setGameState, gameState.state, gameState.players])\n\n    const startGame = useCallback(() => setGameState(prev => {\n        if (prev.state !== GameStateEnum.NotStarted ||\n            !playersSignedUp(prev)) return prev\n\n        return {\n            ...prev,\n            state: GameStateEnum.Running,\n            currentMove: prev.players[0]!,\n            field: [...[...emptyField]]\n        }\n    }), [setGameState])\n\n    const makeMove = useCallback(async (user: UserInfo, cords: Cords) => {\n        if (gameState.state !== GameStateEnum.Running) return\n        if (gameState.currentMove === null) return\n\n        const currentPlayerIndex = gameState.players.findIndex(x => x?.userId === user.userId)\n        if (currentPlayerIndex === -1) return\n\n        const currentPlayer = gameState.players[currentPlayerIndex]!\n        if (gameState.currentMove.userId !== currentPlayer.userId) return\n\n        const currentField = gameState.field[cords.x][cords.y]\n        if (currentField !== Field.Empty) return\n\n        // TODO: immutable update\n        const newValue = currentPlayerIndex === 0 ? Field.X : Field.O\n\n        const newField = updateAt(\n            gameState.field,\n            cords.x,\n            updateAt(\n                gameState.field[cords.x],\n                cords.y,\n                newValue))\n\n        const winner = checkWin(newField)\n        const tie = checkTie(newField)\n\n        // if winner found or game is tied - end game\n        if (winner !== null || tie) {\n            return setGameState(prev => ({\n                ...prev,\n                state: GameStateEnum.Ended,\n                field: [...[...newField]],\n                winner: tie ? null : currentPlayer,\n                currentMove: null,\n            }))\n        }\n\n        const nextPlayerIndex = currentPlayerIndex === 0 ? 1 : 0\n        return setGameState(prev => ({\n            ...prev,\n            field: [...[...newField]],\n            currentMove: prev.players[nextPlayerIndex]!\n        }))\n    }, [gameState.players, gameState.state, gameState.currentMove, gameState.field])\n\n    const restartGame = useCallback(() => {\n        if (gameState.state !== GameStateEnum.Ended) return\n\n        return setGameState(prev => ({\n            ...prev,\n            state: GameStateEnum.NotStarted,\n            field: [...[...emptyField]],\n            currentMove: null,\n            players: [null, null],\n            winner: null\n        }))\n    }, [gameState.state])\n\n    return { gameState, signUpPlayer, startGame, makeMove, restartGame }\n}\n\nexport default useTictacState","import { useEffect, useState, useReducer, useCallback, Reducer, useMemo, useContext, createContext, DependencyList } from 'react'\nimport Peer from 'peerjs'\nimport { Action, isActionOf } from 'typesafe-actions'\nimport { EventEmitter } from 'events'\nimport { StrictEventEmitter } from 'strict-event-emitter-types'\nimport { createPeer } from 'p2p/core'\nimport { useEventListener } from 'utils/useEventListener'\nimport { ActionCreator } from 'typesafe-actions/dist/is-action-of'\n\ntype IdLike = {\n    id: string\n}\n\ntype PeerHost = {\n    id: string | null\n    ready: boolean\n}\n\ntype PeerState = {\n    readonly peer: PeerHost\n    readonly host: PeerHost\n    readonly connections: ReadonlyArray<InternalPeerReference>\n    readonly isHost: boolean\n    readonly error: Error | null\n}\n\nexport type InternalPeerReference = IdLike & {\n    send: <T extends Action = Action>(action: T) => void\n}\n\nexport type PeerDataEvent<T extends Action = Action> = (peer: InternalPeerReference, action: T) => void\n\nexport type PeerEvents = {\n    'any/data': PeerDataEvent\n\n    'open': () => void\n    'peer/open': (peer: InternalPeerReference) => void\n    'peer/data': PeerDataEvent\n\n    'host/open': (perr: InternalPeerReference) => void\n    'host/data': PeerDataEvent\n}\n\nexport type PeerEmmiter = StrictEventEmitter<EventEmitter, PeerEvents>\n\ntype PeerDispatch = (action: Action, source?: IdLike) => void\n\nexport const context = createContext<ReturnType<typeof usePeerConnection>>(null as any) // fix dis?\n\nexport const usePeer = () => {\n    return useContext(context)\n}\n\nconst toInternalPeer = (connection: Peer.DataConnection): InternalPeerReference => ({\n    id: connection.peer,\n    send: action => connection.send(action)\n})\n\nconst selfEmit = (events: PeerEmmiter, selfPeer: Peer, action: Action) => {\n    const selfRefAsHost: InternalPeerReference = {\n        id: selfPeer.id,\n        send: action => {\n            events.emit('host/data', selfRefAsPeer, action)\n            events.emit('any/data', selfRefAsPeer, action)\n        }\n    }\n    const selfRefAsPeer: InternalPeerReference = {\n        id: selfPeer.id,\n        send: action => {\n            events.emit('peer/data', selfRefAsHost, action)\n            events.emit('any/data', selfRefAsHost, action)\n        }\n    }\n    events.emit('host/data', selfRefAsPeer, action)\n    events.emit('any/data', selfRefAsPeer, action)\n}\n\nexport const usePeerConnection = (\n    hostId: string | null,  // broker id to connect. If null - create a new host\n) => {\n    const [events] = useState<PeerEmmiter>(new EventEmitter())\n    const [peerState, setState] = useState<PeerState>({\n        peer: { id: null, ready: false },\n        host: { id: null, ready: false },\n        connections: [],\n        isHost: false,\n        error: null\n    })\n\n    const [peer, setPeer] = useState<Peer | null>(null)\n    const [host, setHost] = useState<Peer.DataConnection | null>(null)\n\n    const { connections } = peerState\n\n    const peerDispatch = useCallback((action: Action) => {\n        console.log('dispatch to host', host, action.type, 'by peer', peerState)\n        if (host !== null) {\n            // Send action to host\n            host.send(action)\n            // TODO: verify host received?\n        }\n\n        if (peerState.isHost)\n            selfEmit(events, peer!, action)\n    }, [host, peer, peerState.isHost])\n\n    const peerBroadcast = useCallback((action: Action, source: IdLike | null = null) => {\n        console.log('dispatch to connections', connections, action.type, 'by peer', peerState)\n        // Send action to all connection except for source connection\n        connections.forEach(connection => source?.id !== connection.id\n            ? connection.send(action) : void (0))\n\n        if (peerState.isHost && source?.id !== peer!.id)\n            selfEmit(events, peer!, action)\n    }, [connections, peer, peerState.isHost])\n\n    useEffect(\n        () => {\n            import('peerjs').then(({ default: peerConstructor }) => {\n                const peer = createPeer(peerConstructor)\n                setPeer(peer)\n\n                console.log('peer created', peer)\n\n                const connectToHost = (hostId: string) => {\n                    console.log('connecting to host')\n                    const host = peer.connect(hostId, { serialization: 'json' })\n                    setHost(host)\n                    host.on('open', () => {\n                        console.log('host is open')\n                        setState(prev => ({ ...prev, host: ({ id: hostId, ready: true }) }))\n                        events.emit('host/open', toInternalPeer(host))\n                    })\n\n                    host.on('data', (action: any) => {\n                        console.log('receive data from host')\n                        events.emit('host/data', toInternalPeer(host), action)\n                        events.emit('any/data', toInternalPeer(host), action)\n                    })\n                }\n\n                const createHost = (hostId: string) => {\n                    console.log('creating a host')\n                    events.emit('open')\n\n                    setState(prev => ({ ...prev, isHost: true, host: { ...prev.host, id: hostId, ready: true } }))\n                    peer.on('connection', conn => {\n                        console.log('peer connected to host')\n\n                        setState(prev => ({ ...prev, connections: [...prev.connections, toInternalPeer(conn)] }))\n                        conn.on('open', () => events.emit('peer/open', toInternalPeer(conn)))\n\n                        conn.on('data', (action: any) => {\n                            console.log('receive data from peer')\n\n                            events.emit('peer/data', toInternalPeer(conn), action)\n                            events.emit('any/data', toInternalPeer(conn), action)\n                        })\n\n                        // Remove connection from active connections\n                        conn.on('close', () => setState(prev => ({ ...prev, connections: prev.connections.filter(x => x.id !== toInternalPeer(conn).id) })))\n                    })\n                }\n\n                peer.on('error', error => {\n                    console.log('error happened', error)\n                    if (error.type === 'unavailable-id' /*|| error.type === 'peer-unavailable'*/) // not changing url on new host\n                        return createHost(peerState.peer.id!)\n                    setState(prev => ({ ...prev, error: new Error(error.type) }))\n                })\n\n                peer.on('open', id => {\n                    setState(prev => ({ ...prev, peer: { ...prev.peer, id, ready: true } }))\n                    if (hostId === null) createHost(id)\n                    else connectToHost(hostId)\n                })\n            })\n\n            return () => {\n                peer && peer.destroy()\n            }\n        }, []\n    )\n\n    return [peerState, events, peerDispatch, peerBroadcast] as const\n}\n\nexport const useDataListen = <\n    AC extends ActionCreator<Action>\n>(\n    events: PeerEmmiter,\n    actionCreator: AC,\n    handler: PeerDataEvent<ReturnType<AC>>,\n    deps: DependencyList\n) => {\n    useEventListener('any/data', events, (conn, action) => {\n        if (isActionOf(actionCreator, action)) {\n            console.log('on:', action.type)\n            handler(conn, action)\n        }\n    }, [actionCreator, ...deps])\n}","import Peer from 'peerjs'\n\nconst server = 'peerjs-test-server.herokuapp.com'\n\nexport const createPeer = (peerConsturctor: typeof Peer) => new peerConsturctor({\n    host: server,\n    secure: true,\n}) ","import { useRef, useEffect, DependencyList } from 'react'\nimport { EventEmitter } from 'events'\nimport StrictEventEmitter from 'strict-event-emitter-types/types/src'\n\n// event listener hook with mutating handler refence to optimize it for state changes\nexport const useEventListener = <E extends Record<string, (...arg: any) => any>, EK extends keyof E>(\n    eventName: EK,\n    events: StrictEventEmitter<EventEmitter, E>,\n    handler: E[EK],\n    deps: DependencyList\n) => {\n    const savedHandler = useRef<E[EK]>(handler)\n\n    // Update ref.current value if handler changes\n    // instead of removing and adding listener everytime\n    useEffect(() => {\n        savedHandler.current = handler\n    }, deps)\n\n    useEffect(\n        () => {\n            console.log(eventName, handler, deps)\n            const listener = (...args: any[]) => savedHandler.current(...args)\n            events.on(eventName, listener)\n\n            return () => {\n                events.removeListener(eventName, listener);\n            };\n        },\n        [eventName] // Re-run if eventName or element changes\n    );\n};\n","import { useCallback, useContext, useEffect } from 'react'\nimport { createAction } from 'typesafe-actions'\n\nimport { usePeer, useDataListen } from 'p2p/usePeerState'\nimport createStoreContext from 'react-concise-state'\n\nconst actions = {\n    // user asks to login\n    login: createAction('login')<string>(),\n    // server answering to login request\n    loginResponse: createAction('login/response')<UsersState>(),\n    newUser: createAction('login/new')<UserInfo>(),\n}\n\nexport type UserInfo = {\n    username: string\n    userId: string\n}\n\ntype UsersState = {\n    currentUser: UserInfo | null\n    users: UserInfo[]\n}\n\nexport const [context, Provider] = createStoreContext({\n    currentUser: null,\n    users: []\n} as UsersState, ({ setState }) => ({\n    addUser: (user: UserInfo) => setState(prev => ({ ...prev, users: [...prev.users, user] })),\n    initState: (state: UsersState) => setState(state)\n}))\n\nexport const useUsers = () => {\n    const store = useContext(context)\n    const [peerState, events, dispatch, broadcast] = usePeer()\n\n    const login = useCallback((username: string) => {\n        dispatch(actions.login(username))\n    }, [dispatch])\n\n    useEffect(() => {\n        // TODO: remove user on conn close\n        //events.on('host/open', () => setState(prev => ({ ...prev, connecting: false })))\n        //events.on('open', () => setState(prev => ({ ...prev, connecting: false })))\n    }, [])\n\n    useDataListen(events, actions.login, (peer, action) => {\n        console.log('on login')\n        const newUser: UserInfo = { userId: peer.id, username: action.payload }\n        const newState: UsersState = { ...store, users: [...store.users, newUser] }\n        peer.send(actions.loginResponse({ ...newState, currentUser: newUser }))\n        broadcast(actions.newUser(newUser), peer)\n    }, [store, broadcast])\n\n    useDataListen(events, actions.newUser, (peer, action) => {\n        console.log('on new user')\n        store.addUser(action.payload)\n    }, [store.addUser])\n\n    useDataListen(events, actions.loginResponse, (peer, action) => {\n        console.log('on login resp')\n        store.initState(action.payload)\n    }, [store.initState])\n\n    return [store, login] as const\n}","import { useState, useCallback, useEffect, useContext } from 'react'\nimport { createAction } from 'typesafe-actions'\n\nimport { usePeer, useDataListen } from 'p2p/usePeerState'\nimport { UserInfo, context as usersContext } from 'app/modules/users'\nimport createStoreContext from 'react-concise-state'\n\nconst actions = {\n    sendMessage: createAction('message/send')<string>(),\n    receiveMessage: createAction('message/receive')<Message>(),\n}\n\ntype Message = {\n    text: string\n    author: UserInfo\n}\n\ntype ChatState = {\n    messages: Message[]\n}\n\nexport const [context, Provider] = createStoreContext({\n    messages: []\n} as ChatState, ({ setState }) => ({\n    addMessage: (message: Message) => setState(prev => ({ ...prev, messages: [...prev.messages, message] }))\n}))\n\nexport const useChat = () => {\n    const chatStore = useContext(context)\n    const [peerState, events, dispatch, broadcast] = usePeer()\n    const userStore = useContext(usersContext)\n\n    const sendMessage = useCallback((message: string) => {\n        dispatch(actions.sendMessage(message))\n    }, [dispatch])\n\n    useDataListen(events, actions.sendMessage, (peer, action) => {\n        const newMessage: Message = { author: userStore.users.find(x => x.userId === peer.id)!, text: action.payload }\n        broadcast(actions.receiveMessage(newMessage))\n    }, [userStore.users, broadcast])\n\n    useDataListen(events, actions.receiveMessage, (peer, action) => {\n        chatStore.addMessage(action.payload)\n    }, [])\n\n    return [chatStore, sendMessage] as const\n}","import { usePeer } from 'p2p/usePeerState'\nimport createStoreContext from 'react-concise-state'\nimport { useEffect, useContext } from 'react'\n\nexport const [context, Provider] = createStoreContext({\n    connecting: true\n}, ({ setState }) => ({\n    setConnected: () => setState({ connecting: false })\n}))\n\nexport const useConnection = () => {\n    const [peerState, events, dispatch, broadcast] = usePeer()\n    const connectionStore = useContext(context)\n\n    useEffect(() => {\n        events.on('host/open', () => connectionStore.setConnected())\n        events.on('open', () => connectionStore.setConnected())\n    }, [])\n\n    return [connectionStore.connecting]\n}","import React, { useEffect, useCallback, useContext } from 'react'\n\nimport { Button, TextField } from '@material-ui/core'\nimport { useChat } from 'app/modules/chat'\nimport { context, useUsers } from 'app/modules/users'\nimport { useConnection } from 'app/modules/connection'\n\nexport type Props = {}\n\nexport const Team: React.FC<Props> = ({ }) => {\n    const [textState, setState] = React.useState('')\n    const [chatState, sendMessage] = useChat()\n    const [usersState, userLogin] = useUsers()\n    const [connecting] = useConnection()\n\n    const login = useCallback((name: string) => {\n        userLogin(name)\n        setState('')\n    }, [userLogin])\n\n    const send = useCallback((msg: string) => {\n        sendMessage(msg)\n        setState('')\n    }, [sendMessage])\n\n    if (connecting)\n        return (<>Connecting...</>)\n\n    if (usersState.currentUser === null)\n        return (\n            <>\n                <div>Choose username:</div>\n                <TextField value={textState} onChange={event => setState(event.currentTarget.value)}></TextField>\n                <Button onClick={() => login(textState)}>Send</Button>\n            </>\n        )\n    return (\n        <>\n            Current user: {usersState.currentUser.username}\n            <br />\n            Users in the room: {usersState.users.map((user, i) => <p key={i}>{user.username} : {user.userId}</p>)}\n            <hr />\n            {chatState.messages.map((msg, key) => <p key={key}>[{msg.author.username}]{msg.text}</p>)}\n            <TextField value={textState} onChange={event => setState(event.currentTarget.value)}></TextField>\n            <Button onClick={() => send(textState)}>Send</Button>\n        </>\n    )\n}\n\nexport default Team","import React, { useEffect, createContext } from 'react'\nimport { useRouteMatch, useHistory, HashRouter } from 'react-router-dom'\n\nimport { usePeerConnection, context } from 'p2p/usePeerState'\n\ntype Props = {\n    route?: string\n}\n\nexport const PeerProvider: React.FC<Props> = ({ route = 'peer', children }) => {\n    const match = useRouteMatch<{ id: string }>(`/${route}/:id`)\n    const history = useHistory()\n\n    const peer = usePeerConnection(match?.params.id ?? null)\n    const [peerState, events, dispatch] = peer\n\n    useEffect(() => {\n        if (match?.params.id === undefined && peerState.host.id !== null)\n            history.push(`/${route}/${peerState.host.id}`)\n    }, [match, peerState.host.id, history])\n\n    return (\n        <context.Provider value={peer}>\n            {children}\n        </context.Provider>\n    )\n}\n\nexport default PeerProvider","import * as React from 'react'\n\ntype Props = {\n    providers: React.FC[]\n}\n\nconst CombineProviders: React.FC<Props> = ({ providers, children }) => {\n    const [First, ...Rest] = providers\n\n    if (First !== undefined)\n        return (\n            <First>\n                <CombineProviders providers={Rest}>\n                    {children}\n                </CombineProviders>\n            </First>\n        )\n\n    return (<>{children}</>)\n}\n\nexport default CombineProviders\n","/*\n    https://github.com/slorber/use-async-setState\n*/\n\nimport React, { useCallback, useEffect, useRef, useState } from 'react'\n\nexport type SyncSetState<S> = (stateUpdate: React.SetStateAction<S>) => void\nexport type AsyncSetState<S> = (\n    stateUpdate: React.SetStateAction<S>\n) => Promise<S>\n\nexport const useAsyncSetStateFunction = <S>(\n    state: S,\n    setState: SyncSetState<S>\n): AsyncSetState<S> => {\n    // hold resolution function for all setState calls still unresolved\n    const resolvers = useRef<((state: S) => void)[]>([])\n\n    // ensure resolvers are called once state updates have been applied\n    useEffect(() => {\n        resolvers.current.forEach(resolve => resolve(state))\n        resolvers.current = []\n    }, [state])\n\n    // make setState return a promise\n    return useCallback(\n        (stateUpdate: React.SetStateAction<S>) => {\n            return new Promise<S>((resolve, reject) => {\n                setState(stateBefore => {\n                    try {\n                        const stateAfter =\n                            stateUpdate instanceof Function\n                                ? stateUpdate(stateBefore)\n                                : stateUpdate\n\n                        // If state does not change, we must resolve the promise because react won't re-render and effect will not resolve\n                        if (stateAfter === stateBefore) {\n                            resolve(stateAfter)\n                        }\n                        // Else we queue resolution until next state change\n                        else {\n                            resolvers.current.push(resolve)\n                        }\n                        return stateAfter\n                    } catch (e) {\n                        reject(e)\n                        throw e\n                    }\n                })\n            })\n        },\n        [setState]\n    )\n}\n\nexport const useAsyncSetState = <S>(initialState: S): [S, AsyncSetState<S>] => {\n    const [state, setState] = useState(initialState)\n    const setStateAsync = useAsyncSetStateFunction(state, setState)\n    return [state, setStateAsync]\n}\n\nexport const useGetState = <S>(state: S): (() => S) => {\n    const stateRef = useRef(state)\n    useEffect(() => {\n        stateRef.current = state\n    })\n    return useCallback(() => stateRef.current, [stateRef])\n}\n","import { Field } from \"./state\"\n\nconst winConditions = [\n    // rows\n    [[0, 0], [0, 1], [0, 2]],\n    [[1, 0], [1, 1], [1, 2]],\n    [[2, 0], [2, 1], [2, 2]],\n    // cols\n    [[0, 0], [1, 0], [2, 0]],\n    [[0, 1], [1, 1], [2, 1]],\n    [[0, 2], [1, 2], [2, 2]],\n    // diags\n    [[0, 0], [1, 1], [2, 2]],\n    [[0, 2], [1, 1], [2, 0]],\n]\n\nexport const checkWin = (field: Field[][]) => winConditions\n    .reduce((winner, [[x1, y1], [x2, y2], [x3, y3]]) => {\n        // if winner found - do not check any further\n        if (winner !== null) return winner\n\n        // check if current winCondition is winner\n        if (field[x1][y1] !== Field.Empty\n            && field[x1][y1] === field[x2][y2]\n            && field[x1][y1] === field[x3][y3])\n            return field[x1][y1]\n\n        // not a winner, so return null\n        return null\n    }, null as Field | null)\n\nexport const checkTie = (field: Field[][]) =>\n    !field\n        .some(row => row\n            .some(cell => cell === Field.Empty))\n\n","export const updateAt =\n    <T>(array: Array<T>, index: number, newValue: T) =>\n        array.map((value, i) =>\n            i === index\n                ? newValue\n                : value)","import createStoreContext from 'react-concise-state'\nimport { useEffect, useContext, useCallback, useMemo } from 'react'\nimport { createAction, ActionCreator } from 'typesafe-actions'\n\nimport { usePeer, useDataListen } from 'p2p/usePeerState'\nimport { UserInfo, context as usersContext } from 'app/modules/users'\nimport { useAsyncSetState } from 'utils/useAsyncSetState'\nimport useTictacState, { GameStateEnum, Cords } from './state'\n\nconst actions = {\n    signUpRequest: createAction('tictac/signup/request')(),\n    signUpResponse: createAction('tictac/signup/response')<UserInfo>(),\n    successSignUpResponse: createAction('tictac/signup-success/response')(),\n    startGame: createAction('tictac/game/start')(),\n    restartGame: createAction('tictac/game/restart')(),\n    moveRequest: createAction('tictac/move/request')<Cords>(),\n    moveResponse: createAction('tictac/move/response')<{ user: UserInfo, cords: Cords }>(),\n}\n\nexport const useTictac = () => {\n    const [peerState, events, dispatch, broadcast] = usePeer()\n    const userStore = useContext(usersContext)\n    const { gameState, signUpPlayer, startGame, makeMove, restartGame } = useTictacState()\n\n    // TODO: Move state verifies to `useTictacState` and return result from state actions\n    const signUp = useCallback(() => dispatch(actions.signUpRequest()), [dispatch])\n\n    useDataListen(events, actions.signUpRequest, (peer, action) => {\n        const newPlayer = userStore.users.find(x => x.userId === peer.id)!\n        broadcast(actions.signUpResponse(newPlayer))\n    }, [userStore.users, broadcast])\n\n    useDataListen(events, actions.signUpResponse, async (peer, action) => {\n        const result = await signUpPlayer(action.payload)\n        if (result)\n            broadcast(actions.successSignUpResponse())\n    }, [signUpPlayer, broadcast])\n\n    useDataListen(events, actions.successSignUpResponse, (peer, action) => {\n        broadcast(actions.startGame())\n    }, [gameState.state, broadcast])\n\n    useDataListen(events, actions.startGame, (peer, action) => {\n        startGame()\n    }, [startGame])\n\n    // Game\n    const move = useCallback((cords: Cords) => dispatch(actions.moveRequest(cords)), [dispatch])\n\n    useDataListen(events, actions.moveRequest, async (peer, action) => {\n        const user = userStore.users.find(x => x.userId === peer.id)!\n        broadcast(actions.moveResponse({ cords: action.payload, user }))\n    }, [gameState.players, gameState.state, broadcast])\n\n    useDataListen(events, actions.moveResponse, (peer, action) => {\n        makeMove(action.payload.user, action.payload.cords)\n    }, [makeMove])\n\n    const restart = useCallback(() => {\n        dispatch(actions.restartGame())\n    }, [dispatch, peerState.peer])\n\n    useDataListen(events, actions.restartGame, (peer, action) => {\n        restartGame()\n        broadcast(actions.restartGame(), peer)\n    }, [restartGame, broadcast])\n\n    return { gameState, signUp, move, restart }\n}","import React, { useCallback } from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\n\nimport { Field, Cords } from 'app/modules/tictac/state'\n\nconst useStyles = makeStyles({\n    field: {\n\n    },\n    row: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    cell: {\n        border: '1px solid black',\n        height: '3em',\n        width: '3em',\n        boxSizing: 'border-box',\n        '&:hover': {\n            border: '2px solid black'\n        }\n    }\n})\n\nexport type Props = {\n    field: Field[][]\n    onMove: (cords: Cords) => void\n}\n\ntype CellProps = {\n    field: Field\n    onClick: () => void\n}\n\nconst Cell: React.FC<CellProps> = ({ field, onClick = () => { } }) => {\n    const classes = useStyles()\n    return (\n        <div className={classes.cell} onClick={onClick}>\n            {field !== Field.Empty\n                ? Field[field]\n                : null}\n        </div>\n    )\n}\n\nexport const TictacField: React.FC<Props> = ({ field, onMove }) => {\n    const classes = useStyles()\n\n    const handleClick = useCallback((cords: Cords) => () => onMove(cords), [onMove])\n\n    return (\n        <div className={classes.field}>\n            <div className={classes.row}>\n                <Cell field={field[0][0]} onClick={handleClick({ x: 0, y: 0 })} />\n                <Cell field={field[0][1]} onClick={handleClick({ x: 0, y: 1 })} />\n                <Cell field={field[0][2]} onClick={handleClick({ x: 0, y: 2 })} />\n            </div>\n            <div className={classes.row}>\n                <Cell field={field[1][0]} onClick={handleClick({ x: 1, y: 0 })} />\n                <Cell field={field[1][1]} onClick={handleClick({ x: 1, y: 1 })} />\n                <Cell field={field[1][2]} onClick={handleClick({ x: 1, y: 2 })} />\n            </div>\n            <div className={classes.row}>\n                <Cell field={field[2][0]} onClick={handleClick({ x: 2, y: 0 })} />\n                <Cell field={field[2][1]} onClick={handleClick({ x: 2, y: 1 })} />\n                <Cell field={field[2][2]} onClick={handleClick({ x: 2, y: 2 })} />\n            </div>\n        </div>\n    )\n}\n\n\nexport default TictacField","import React from 'react'\n\nimport { Field, Cords } from 'app/modules/tictac/state'\nimport TictacField from 'app/pages/tictac/Field'\nimport { UserInfo, useUsers } from 'app/modules/users'\n\nexport type Props = {\n    field: Field[][]\n    onMove: (cords: Cords) => void\n    currentMove: UserInfo\n}\n\nexport const Game: React.FC<Props> = ({ field, onMove, currentMove }) => {\n    const [usersState] = useUsers()\n\n    const { currentUser } = usersState\n\n    return (\n        <>\n            <p>Game running!</p>\n            {currentUser!.userId == currentMove.userId\n                ? <p>Your move: </p>\n                : <p>Opponents move...</p>}\n            <TictacField field={field} onMove={onMove} />\n        </>\n    )\n}\n\nexport default Game","import React, { useCallback } from 'react'\nimport { TextField, Button, Grid } from '@material-ui/core'\n\nimport { useConnection } from 'app/modules/connection'\nimport { useUsers } from 'app/modules/users'\nimport { useChat } from 'app/modules/chat'\nimport { useTictac } from 'app/modules/tictac'\n\nimport Game from 'app/pages/tictac/Game'\nimport Field from 'app/pages/tictac/Field'\nimport { GameStateEnum } from 'app/modules/tictac/state'\n\nexport type Props = {}\n\nexport const Tictac: React.FC<Props> = ({ }) => {\n    const [textState, setState] = React.useState('')\n    const [chatState, sendMessage] = useChat()\n    const [usersState, userLogin] = useUsers()\n    const { gameState, signUp, move, restart } = useTictac()\n    const [connecting] = useConnection()\n\n    const login = useCallback((name: string) => {\n        userLogin(name)\n        setState('')\n    }, [userLogin])\n\n    const send = useCallback((msg: string) => {\n        sendMessage(msg)\n        setState('')\n    }, [sendMessage])\n\n    if (connecting)\n        return (<>Connecting...</>)\n\n    if (usersState.currentUser === null)\n        return (\n            <>\n                <div>Choose username:</div>\n                <TextField value={textState} onChange={event => setState(event.currentTarget.value)}></TextField>\n                <Button onClick={() => login(textState)}>Send</Button>\n            </>\n        )\n\n    return (\n        <Grid container>\n            <Grid item xs={3}>\n                Current user: {usersState.currentUser.username}\n                <br />\n                Users in the room: {usersState.users.map((user, i) => <p key={i}>{user.username} : {user.userId}</p>)}\n                <hr />\n                {chatState.messages.map((msg, key) => <p key={key}>[{msg.author.username}]{msg.text}</p>)}\n                <TextField value={textState} onChange={event => setState(event.currentTarget.value)}></TextField>\n                <Button onClick={() => send(textState)}>Send</Button>\n            </Grid>\n            <Grid item xs={9}>\n                <p>State: {GameStateEnum[gameState.state]}</p>\n                <p>Players: {gameState.players.filter(x => x !== null).map(x => x?.username ?? \"\").join(',')}</p>\n                {\n                    gameState.state == GameStateEnum.NotStarted\n                        ? <Button onClick={signUp}>Signup for the game</Button>\n                        : null\n                }\n                {\n                    gameState.state == GameStateEnum.Running\n                        ? <Game\n                            field={gameState.field}\n                            onMove={move}\n                            currentMove={gameState.currentMove!}\n                        />\n                        : null\n                }\n                {\n                    gameState.state == GameStateEnum.Ended\n                        ? <>\n                            <p>Game ended</p>\n                            {\n                                gameState.winner !== null\n                                    ? <p>Winner: {gameState.winner!.username}!</p>\n                                    : <p>Tie!</p>\n                            }\n                            <Button onClick={restart}>Restart game</Button>\n                            <Field\n                                field={gameState.field}\n                                onMove={() => { }}\n                            />\n                        </>\n                        : null\n                }\n            </Grid>\n        </Grid>\n    )\n}\n\nexport default Tictac","import React from 'react'\n\nimport { Switch, Route, Redirect } from 'react-router-dom'\nimport Team from './team'\nimport { PeerProvider } from './PeerProvider'\nimport { Provider as UsersProvider } from 'app/modules/users'\nimport { Provider as ChatProvider } from 'app/modules/chat'\nimport { Provider as ConnectionProvider } from 'app/modules/connection'\nimport CombineProviders from 'app/CombineProviders'\nimport Tictac from 'app/pages/tictac'\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/tictac\">\n        <PeerProvider route=\"tictac\">\n          <CombineProviders providers={[ChatProvider, UsersProvider, ConnectionProvider]}>\n            <Tictac />\n          </CombineProviders>\n        </PeerProvider>\n      </Route>\n      <Route path=\"/t\">\n        <PeerProvider>\n          <CombineProviders providers={[ChatProvider, UsersProvider, ConnectionProvider]}>\n            <Team />\n          </CombineProviders>\n        </PeerProvider>\n      </Route>\n    </Switch>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\n\nimport { HashRouter } from 'react-router-dom'\n\nexport const RouterOutlet: React.FC = ({ children }) => {\n    return (\n        <HashRouter>\n            {children}\n        </HashRouter>\n    )\n}\n\nexport default RouterOutlet","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from 'app/App'\nimport * as serviceWorker from './serviceWorker'\nimport RouterOutlet from 'app/router'\n\nReactDOM.render(\n  <React.StrictMode>\n    <RouterOutlet>\n      <App />\n    </RouterOutlet>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\nserviceWorker.unregister()\n"],"sourceRoot":""}